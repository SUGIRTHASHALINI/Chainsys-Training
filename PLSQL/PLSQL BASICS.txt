--1)HELLO WORLD
BEGIN
DBMS_OUTPUT.PUT_LINE('HELLO WORLD!');
END;
-----------------------------------
--2)HELLO
BEGIN
DBMS_OUTPUT.PUT_LINE('HELLO');
END;
-----------------------------------
--3)VARIABLE DECLARATION
DECLARE
  l_message VARCHAR2( 255 ) DEFAULT 'Hello All!';
BEGIN
  DBMS_OUTPUT.PUT_LINE( l_message );
END;
--------------------------------------------------
--3)
DECLARE
      v_result NUMBER;
BEGIN
   v_result := 10 / 10;
    DBMS_OUTPUT.PUT_LINE(V_RESULT );
   EXCEPTION
      WHEN ZERO_DIVIDE THEN
         DBMS_OUTPUT.PUT_LINE( SQLERRM );
END;
----------------------------------
--4)EXCEPTION

DECLARE
      v_result NUMBER;
BEGIN
   v_result := 10 / 10;
    DBMS_OUTPUT.PUT_LINE(V_RESULT );
   EXCEPTION
      WHEN ZERO_DIVIDE THEN
         DBMS_OUTPUT.PUT_LINE( SQLERRM );
END;

--------------------------------------------
--7)NOT NULL VARIABLE
DECLARE
  l_shipping_status VARCHAR2( 25 ) NOT NULL := 'Shipped'; --MUST INITIALIZE
BEGIN
  l_shipping_status := ' ';--MUST NOT NULL
  DBMS_OUTPUT.PUT_LINE(l_shipping_status);
END;
------------------------------------------
--8)BASED ON COLUMN TYPE %TYPE
DECLARE
  l_customer_name customer_PERSONAL_INFO_2605.CUSTOMER_name%TYPE;
  l_CUSTOMER_ID customer_PERSONAL_INFO_2605.CUSTOMER_ID%TYPE;
BEGIN
  SELECT
    CUSTOMER_name, CUSTOMER_ID
  INTO
    l_customer_name, l_CUSTOMER_ID
  FROM
    customer_PERSONAL_INFO_2605
  WHERE
    customer_id = 'C-001';

  DBMS_OUTPUT.PUT_LINE(l_customer_name || ' : ' || l_cUSTOMER_ID );
END;
-----------------------------------------
--9)VARIABLE ASSIGNMENT
DECLARE
    l_business_partner VARCHAR2(100) := 'Distributor';
    l_lead_for VARCHAR2(100);
BEGIN
    l_lead_for := l_business_partner; 
    DBMS_OUTPUT.PUT_LINE('LEAD FOR : ' || l_lead_for);
END;
--------------------------------
--10)DECLARE USER DEFINED DATATYPE
DECLARE
    l_interest   account_info_2605.interest%TYPE;
    l_avg_int     l_interest%TYPE;
    l_max_int     l_interest%TYPE;
    l_min_int     l_interest%TYPE;
BEGIN
    SELECT 
        MIN(interest), 
        MAX(interest), 
        AVG(interest)
    INTO 
        l_min_int,
        l_max_int, 
        l_avg_int
    FROM account_info_2605;
  
    -- show the interest     
    dbms_output.put_line('Min Interest: ' || l_min_int);
    dbms_output.put_line('Max Interest: ' || l_max_int);
    dbms_output.put_line('Avg Interest: ' || l_avg_int);
end;
-----------------------------------------------------------------
--12)constant
DECLARE 
    co_pi     CONSTANT REAL := 3.14159; --must be initialize
    co_radius CONSTANT REAL := 10;
    co_area   CONSTANT REAL := (co_pi * co_radius**2);
BEGIN
--  CO_PI := 23;
    DBMS_OUTPUT.PUT_LINE(co_area);
END;
---------------------------------------------------------------
--13) IF STATEMENT
DECLARE 
   n_sales NUMBER := 2000000; 
BEGIN 
   IF n_sales > 100000 THEN 
      DBMS_OUTPUT.PUT_LINE( 'Sales revenue is greater than 100K ' ); 
   END IF; 
END;
-----------------------------------------------------------
--14)AVOID CLUMSY IF
DECLARE
  b_profitable BOOLEAN;
  n_sales      NUMBER;
  n_costs      NUMBER;
BEGIN
--  b_profitable := false;   
--  IF n_sales > n_costs THEN
--    b_profitable := true;
--  END IF;
  b_profitable := n_sales > n_costs;
--  DBMS_OUTPUT.PUT_LINE( 'b_profitable' ); 
if(b_profitable) then
DBMS_OUTPUT.PUT_LINE( 'b_profitable' );
else
DBMS_OUTPUT.PUT_LINE( 'b_profitable' );
END IF;
END;
-------------------------------------------------------------
--15)AVOID EVALUATING BOOLEAN VARIABLES
IF b_profitable = TRUE THEN
   DBMS_OUTPUT.PUT_LINE( 'This sales deal is profitable' );
END IF;
IF b_profitable THEN
   DBMS_OUTPUT.PUT_LINE( 'This sales deal is profitable' );
END IF;
----------------------------------------------------
--16)IF THEN ELSE
DECLARE
  n_sales NUMBER := 300000;
  n_commission NUMBER( 10, 2 ) := 0;
BEGIN
  IF n_sales > 200000 THEN
    n_commission := n_sales * 0.1;
    DBMS_OUTPUT.PUT_LINE(n_commission );
  ELSE
    n_commission := n_sales * 0.05;
    DBMS_OUTPUT.PUT_LINE( n_commission );
  END IF;
END;
-------------------------------------------------
--17)IF THEN ELSIF
DECLARE
  n_sales NUMBER := 150000;
  n_commission NUMBER( 10, 2 ) := 0;
BEGIN
  IF n_sales > 200000 THEN
    n_commission := n_sales * 0.1;
  ELSIF n_sales <= 200000 THEN
    IF n_sales > 100000 THEN           --NESTED IF
    n_commission := n_sales * 0.05;
    END IF;
  ELSIF n_sales <= 100000 AND n_sales > 50000 THEN 
    n_commission := n_sales * 0.03;
  ELSE
    n_commission := n_sales * 0.02;
  END IF;
  DBMS_OUTPUT.PUT_LINE( n_commission );
END;
-----------------------------------------------------
--19)19 CASE
DECLARE
  c_grade CHAR( 1 );
  c_rank  VARCHAR2( 20 );
BEGIN
  c_grade := 'D';
  CASE c_grade
  WHEN 'A' THEN
    c_rank := 'Excellent' ;
  WHEN 'B' THEN
    c_rank := 'Very Good' ;
  WHEN 'C' THEN
    c_rank := 'Good' ;
  WHEN 'D' THEN
    c_rank := 'Fair' ;
  WHEN 'F' THEN
    c_rank := 'Poor' ;
  ELSE
    c_rank := 'No such grade' ;
  END CASE;
  DBMS_OUTPUT.PUT_LINE( c_rank );
END;
-----------------------------------------------
--20)goto
BEGIN
  GOTO second_message;

  <<first_message>>
  DBMS_OUTPUT.PUT_LINE( 'Hello' );
  GOTO the_end;

  <<second_message>>
  DBMS_OUTPUT.PUT_LINE( 'PL/SQL GOTO Demo' );
  GOTO first_message;

  <<the_end>>
  DBMS_OUTPUT.PUT_LINE( 'and good bye...' );

END;
----------------------------------------------
--21)-- 21 NULL
DECLARE
  n_credit_status VARCHAR2( 50 );
BEGIN
  n_credit_status := 'GOOD';

  CASE n_credit_status
  WHEN 'BLOCK' THEN
   DBMS_OUTPUT.PUT_LINE( 'REQUEST FOR APPROVAL' );
  WHEN 'WARNING' THEN
   DBMS_OUTPUT.PUT_LINE( 'SEND EMAIL' );
  ELSE
    NULL;
  END CASE;
END;
----------------------------------------
-- 22 LOOP
DECLARE
  l_counter NUMBER := 0;
BEGIN
  LOOP
    l_counter := l_counter + 1;
--    IF l_counter > 3 THEN
--      EXIT;
--    END IF;
    EXIT WHEN l_counter > 3;
    dbms_output.put_line( 'Inside loop: ' || l_counter )  ;
  END LOOP;
  -- control resumes here after EXIT
  dbms_output.put_line( 'After loop: ' || l_counter );
END; 
---------------------------------------------------
-- 23 FOR LOOP
DECLARE
  l_step  PLS_INTEGER := 2;
BEGIN
  FOR l_counter IN 1..5
  LOOP
    DBMS_OUTPUT.PUT_LINE( l_counter ||' * ' || l_step ||' = ' || l_counter*l_step );
  END LOOP;
  end;
---------------------------------------------------------------
-- 24 WHILE LOOP
DECLARE
   n_counter NUMBER := 1;
BEGIN
   WHILE n_counter <= 5
      LOOP
        DBMS_OUTPUT.PUT_LINE( 'Counter : ' || n_counter );
        n_counter := n_counter + 1;
        -- EXIT WHEN n_counter = 3;
      END LOOP;
   END;
------------------------------------------------
-- 25 CONTINUE
BEGIN
  FOR n_index IN 1 .. 10
  LOOP
    -- skip odd numbers
    IF MOD( n_index, 2 ) = 1 THEN
      CONTINUE;
    END IF;
    DBMS_OUTPUT.PUT_LINE( n_index );
  END LOOP;
END;
-------------------------------------------------------